---
import Layout from "../layouts/MainLayout.astro";
---

<Layout title="Cesta">
  <header>
    <h2 class="mt-8 mb-8 text-2xl text-center font-semibold">
      CESTA DE COMPRA
    </h2>
  </header>

  <div class="flex flex-col md:flex-row">
    <!-- Productos seleccionados -->
    <div id="cartContainer" class="w-full md:w-1/2 p-4">
      <div class="block">
        <h2 class="font-bold text-xl mb-4 text-gray-700 dark:text-white">
          Productos seleccionados
        </h2>
        <div class="flex items-center mb-4 justify-between">
          <div class="flex items-center">
            <input type="checkbox" id="selectAll" class="mr-2" />
            <p class="text-gray-600 dark:text-white">
              Selecciona todos los productos
            </p>
          </div>
          <button
            id="deleteButton"
            class="ml-auto p-0 bg-transparent border-none cursor-pointer"
          >
            <img
              src="https://i.ibb.co/YZyDgTH/eliminar-producto.png"
              alt="eliminar-producto"
              class="w-6 h-6 md:w-8 md:h-8"
            />
          </button>
        </div>
      </div>
      <!-- Producto -->
      <!-- Otros productos... -->
    </div>
    <!-- Resumen -->
    <div class="w-full md:w-1/2 p-4">
      <h2 class="font-bold text-xl mb-4 text-gray-700 dark:text-white">
        Resumen
      </h2>
      <p class="mb-4 text-gray-600 dark:text-white">
        Total a pagar: <span id="totalPrice" class="font-bold text-green-500"
          >S/ 0.00</span
        >
      </p>
      <button
        class="px-4 py-2 mb-2 w-full md:w-auto bg-blue-500 text-white"
        onclick="location.href='./ventas'">Seguir comprando</button
      >
      <button class="bg-red-500 text-white px-4 py-2 mb-2 w-full md:w-auto"
        >Cancelar</button
      >
      <button
        id="payButton"
        class="bg-green-500 text-white px-4 py-2 w-full md:w-auto"
        onclick="location.href='./compras'"
      >
        Pagar productos
      </button>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const cart = JSON.parse(localStorage.getItem("cart")) || [];
      const cartContainer = document.getElementById("cartContainer");
      const selectAllCheckbox = document.getElementById("selectAll");

      if (cart.length === 0) {
        cartContainer.innerHTML = "<p>No hay productos en el carrito.</p>";
      } else {
        cart.forEach((product: any, index: any) => {
          const productElement = document.createElement("div");
          productElement.className = "flex items-center mb-4 border-b pb-4";
          productElement.innerHTML = `
            <input type="checkbox" class="mr-2 product-checkbox" data-index="${index}" />
            <img src="${product.image}" alt="${product.name}" class="w-16 h-16 mr-4" />
            <div class="flex-grow">
              <h3 class="font-bold text-gray-700 dark:text-white">${product.name}</h3>
              <div class="flex items-center">
                <p class="font-bold text-green-500 mr-4">S/ ${product.price.toFixed(2)}</p>
                <div class="ml-auto">
                  <button
                    id="decrement-${index}"
                    class="decrement px-2 font-semibold bg-gray-200 dark:bg-gray-700"
                  >-</button>
                  <span id="number-${index}" class="mx-2 font-semibold">${product.quantity}</span>
                  <button
                    id="increment-${index}"
                    class="increment px-2 font-semibold bg-gray-200 dark:bg-gray-700"
                  >+</button>
                </div>
              </div>
            </div>`;

          cartContainer.appendChild(productElement);

          document
            .getElementById(`number-${index}`)
            .addEventListener("change", () => {
              updateCart(cart);
              calculateTotal(); // Recalculamos el total a pagar
            });

          // Agregue detectores de eventos para botones de incremento y disminución
          document
            .getElementById(`decrement-${index}`)
            .addEventListener("click", () => {
              if (product.quantity > 1) {
                product.quantity -= 1;
                document.getElementById(`number-${index}`).textContent =
                  product.quantity;
                updateCart(cart);
              }
            });

          document
            .getElementById(`increment-${index}`)
            .addEventListener("click", () => {
              product.quantity += 1;
              document.getElementById(`number-${index}`).textContent =
                product.quantity;
              updateCart(cart);
            });
        });

        // Agregar detector de eventos para seleccionar todo la casilla de verificación
        selectAllCheckbox.addEventListener("change", (event) => {
          const checkboxes = document.querySelectorAll(".product-checkbox");
          checkboxes.forEach((checkbox) => {
            (checkbox as HTMLInputElement).checked = (
              event.target as HTMLInputElement
            ).checked;
          });
          updateTotalPrice(); // Agregamos esta línea para actualizar el precio
        });
      }

      function setTotalPrice(total: any) {
        document.getElementById("totalPrice").textContent =
          `S./ ${total.toFixed(2)}`;
      }

      function calculateTotal() {
        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        let total = 0;

        cart.forEach((product: any) => {
          const checkbox = document.querySelector(
            `.product-checkbox[data-index="${cart.indexOf(product)}"]`
          );
          if (checkbox.checked) {
            total += product.price * product.quantity;
          }
        });

        setTotalPrice(total);
      }

      calculateTotal();

      function updateTotalPrice() {
        let total = 0;
        document
          .querySelectorAll(".product-checkbox:checked")
          .forEach((checkbox) => {
            const product = checkbox.closest(
              ".flex.items-center.mb-4.border-b.pb-4"
            );
            const price = parseFloat(
              product
                .querySelector(".font-bold.text-green-500")
                .textContent.replace("S/ ", "")
            );
            const quantity = parseInt(
              product.querySelector(".mx-2.font-semibold").textContent
            );
            total += price * quantity;
          });

        setTotalPrice(total);
      }

      document.querySelectorAll(".product-checkbox").forEach((checkbox) => {
        checkbox.addEventListener("change", () => {
          calculateTotal(); // Recalcula el total después de seleccionar/deseleccionar productos
          updateTotalPrice();
        });
      });

      // Función para actualizar el carrito en localStorage
      function updateCart(cart: any) {
        localStorage.setItem("cart", JSON.stringify(cart));
      }

      document.getElementById("deleteButton").addEventListener("click", () => {
        const selectAllCheckbox = document.getElementById("selectAll");
        const checkboxes = document.querySelectorAll(".product-checkbox");
        const cart = JSON.parse(localStorage.getItem("cart")) || [];

        if (selectAllCheckbox.checked) {
          // Si el checkbox "selectAll" está seleccionado, eliminamos todos los productos
          for (let i = checkboxes.length - 1; i >= 0; i--) {
            const checkbox = checkboxes[i];
            const index = checkbox.dataset.index;
            cart.splice(index, 1);
          }
          localStorage.setItem("cart", JSON.stringify(cart));
        } else {
          // Si no lo está, eliminamos solo los productos correspondientes a los checkbox individuales
          for (let i = checkboxes.length - 1; i >= 0; i--) {
            const checkbox = checkboxes[i];
            if (checkbox.checked) {
              const index = checkbox.dataset.index;
              cart.splice(index, 1);
            }
          }
          localStorage.setItem("cart", JSON.stringify(cart));
        }

        updateCart(cart);
        calculateTotal();
        location.reload();
      });

      // Agregue detectores de eventos para botones de incremento y disminución
      document.querySelectorAll(".decrement").forEach((button) => {
        button.addEventListener("click", () => {
          const index = button.dataset.index;
          const product = cart[index];
          if (product.quantity > 1) {
            product.quantity -= 1;
            document.getElementById(`number-${index}`).textContent =
              product.quantity;
            updateCart(cart);
            calculateTotal(); // Recalcula el total después de cambiar la cantidad
          }
        });
      });

      document.querySelectorAll(".increment").forEach((button) => {
        button.addEventListener("click", () => {
          const index = button.dataset.index;
          const product = cart[index];
          product.quantity += 1;
          document.getElementById(`number-${index}`).textContent =
            product.quantity;
          updateCart(cart);
          calculateTotal(); // Recalcula el total después de cambiar la cantidad
        });
      });

      document.querySelectorAll(".increment,.decrement").forEach((button) => {
        button.addEventListener("click", () => {
          updateTotalPrice();
        });
      });

      // Agregar detector de eventos al botón "Pagar productos"
      document.getElementById("payButton").addEventListener("click", () => {
        const selectedProducts = [];
        const checkboxes = document.querySelectorAll(
          ".product-checkbox:checked"
        );

        checkboxes.forEach((checkbox: any) => {
          const index = checkbox.dataset.index;
          selectedProducts.push(cart[index]);
        });

        localStorage.setItem(
          "selectedProducts",
          JSON.stringify(selectedProducts)
        );
        location.href = "./compras";
      });
    });
  </script>
</Layout>
