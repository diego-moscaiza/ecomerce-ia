---
import axios from "axios";
import Layout from "../layouts/MainLayout.astro";

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const nombre = data.get("nombre");
    const apellido = data.get("apellido");
    const documento = data.get("documento");
    const fecha_nacimiento = data.get("fecha_nacimiento");
    const sexo = data.get("sexo");
    const telefono = data.get("telefono");
    const correo = data.get("correo");
    const contraseña = data.get("contraseña");
    const apiUrl = "http://127.0.0.1:8000/api/clientes/register/";
    const response = await axios.post(apiUrl, {
      nombre,
      apellido,
      documento,
      fecha_nacimiento,
      sexo,
      telefono,
      correo,
      contraseña,
    });
    if (response.status === 201) {
      // Mostrar una respuesta de registro de cuenta exitosa
      console.log(`Se ha registrado el correo ${correo} exitosamente`);
      // Redirigir a otra página
      return Astro.redirect("/iniciar-sesion");
    } else {
      console.error("Estado del servidor:", response.statusText);
      console.log(response);
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error("Error al crea cuenta:", error.message);
    }
  }
}
---

<!-- formualrio Registrarse -->
<Layout title="Registrarse">
  <div class="justify-center min-h-[calc(100vh-4rem)] pt-8">
    <div class="max-w-2xl mx-auto p-4 lg:p-6 md:p-5 sm:p-4">
      <h1 class="text-4xl font-semibold mb-8 text-center">Crea tu cuenta</h1>
      <ol
        class="flex items-center w-full text-sm text-gray-500 font-medium sm:text-base mb-12"
      >
        <li
          class="flex flex-grow items-center text-blue-600 after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-4 xl:after:mx-8"
          data-step="1"
        >
          <div
            class="flex items-center whitespace-nowrap sm:after:hidden after:mx-2"
          >
            <span
              class="step-number w-6 h-6 bg-blue-600 border border-blue-200 rounded-full flex justify-center items-center mr-3 text-sm text-white lg:w-10 lg:h-10"
              >1</span
            ><span class="text-black dark:text-white">Información personal</span
            >
          </div>
        </li>
        <li class="flex text-black" data-step="2">
          <div class="flex items-center">
            <span
              class="step-number w-6 h-6 bg-gray-100 dark border border-gray-200 rounded-full flex justify-center items-center mr-3 lg:w-10 lg:h-10"
              >2</span
            >
            <span class="text-black dark:text-white">Correo y contraseña</span>
          </div>
        </li>
      </ol>

      <div class="flex flex-col">
        <!-- Contenido del primer paso -->
        <form method="post">
          <div class="step-content" data-step-content="1">
            <div id="step1Form">
              <fieldset class="mb-4 grid grid-cols-1 md:grid-cols-2 md:gap-4">
                <div class="mb-4 md:mb-0">
                  <label
                    for="name"
                    class="block text-black dark:text-gray-300 mb-2"
                    >Nombres
                    <span class="text-red-500 font-bold">*</span>
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="nombre"
                    required
                    placeholder="Ingrese sus nombres"
                    oninput="if(this.value.length >= 40) this.value = this.value.slice(0, 40);"
                    class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div>
                  <label
                    for="last-name"
                    class="block text-black dark:text-gray-300 mb-2"
                    >Apellidos
                    <span class="text-red-500 font-bold">*</span>
                  </label>
                  <input
                    type="text"
                    id="last-name"
                    name="apellido"
                    required
                    placeholder="Ingrese sus apellidos"
                    oninput="if(this.value.length >= 60) this.value = this.value.slice(0, 60);"
                    class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                  />
                </div>
              </fieldset>
              <fieldset class="mb-4 grid grid-cols-1 md:grid-cols-2 md:gap-4">
                <div class="mb-4 md:mb-0">
                  <label
                    for="document"
                    class="block text-black dark:text-gray-300 mb-2"
                    >DNI
                    <span class="text-red-500 font-bold">*</span>
                  </label>
                  <input
                    type="text"
                    id="document"
                    name="documento"
                    required
                    placeholder="Ingrese su DNI"
                    oninput="if(this.value.length > 8) this.value = this.value.slice(0, 8);"
                    class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div class="mb-4 md:mb-0">
                  <label
                    for="fecha-nacimiento"
                    class="block text-black dark:text-gray-300 mb-2"
                    >Fecha de nacimiento
                    <span class="text-red-500 font-bold">*</span>
                  </label>
                  <input
                    type="date"
                    id="fecha-nacimiento"
                    name="fecha_nacimiento"
                    required
                    class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                  />
                </div>
              </fieldset>
              <fieldset class="mb-4 flex flex-col md:flex-row md:space-x-4">
                <div class="md:w-1/2">
                  <label
                    for="sex"
                    class="block text-black dark:text-gray-300 mb-2"
                  >
                    Sexo
                    <span class="text-red-500 font-bold">*</span>
                  </label>
                  <select
                    id="sex"
                    name="sexo"
                    required
                    class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                  >
                    <option value="">Seleccione una opción</option>
                    <option value="Masculino">Masculino</option>
                    <option value="Femenino">Femenino</option>
                    <option value="Otro">Otro</option>
                  </select>
                </div>

                <div class="md:w-1/2">
                  <label
                    for="phone"
                    class="block text-black dark:text-gray-300 mb-2"
                    >Teléfono
                    <span class="text-red-500 font-bold">*</span>
                  </label>
                  <input
                    type="text"
                    id="phone"
                    name="telefono"
                    required
                    inputmode="numeric"
                    class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                    placeholder="Ingrese su número de teléfono"
                  />
                </div>
              </fieldset>
            </div>
          </div>
          <!-- Contenido del segundo paso -->
          <div class="step-content hidden" data-step-content="2">
            <div id="step2Form" class="mb-4">
              <label
                for="email"
                class="block text-black dark:text-gray-300 mb-2"
                >Correo electrónico
                <span class="text-red-500 font-bold">*</span>
              </label>
              <input
                type="email"
                id="email"
                name="correo"
                required
                placeholder="Ingrese su correo"
                oninput="if(this.value.length >= 30) this.value = this.value.slice(0, 30);"
                class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
              />
            </div>
            <fieldset class="mb-4 grid grid-cols-1 md:grid-cols-2 md:gap-4">
              <div class="mb-4 md:mb-0">
                <label
                  for="password"
                  class="block text-black dark:text-gray-300 mb-2"
                  >Contraseña
                  <span class="text-red-500 font-bold">*</span>
                </label>
                <input
                  type="password"
                  id="password"
                  name="contraseña"
                  required
                  placeholder="Ingrese su contraseña"
                  class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label
                  for="password-2"
                  class="block text-black dark:text-gray-300 mb-2"
                  >Confirmar contraseña
                  <span class="text-red-500 font-bold">*</span>
                </label>
                <input
                  type="password"
                  id="confirm-password"
                  required
                  placeholder="Vuelva a ingresar su contraseña"
                  class="w-full border text-black dark:text-black border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:border-blue-500"
                />
              </div>
            </fieldset>
          </div>
          <div class="flex justify-start gap-x-2 mt-4">
            <button
              type="button"
              id="prev-btn"
              class="w-52 h-12 shadow-sm rounded-md bg-gray-600 hover:bg-gray-800 text-white text-base font-semibold leading-7"
            >
              Anterior
            </button>
            <button
              type="button"
              id="next-btn"
              class="w-52 h-12 shadow-sm rounded-md bg-blue-600 transition-all duration-700 text-white text-base font-semibold leading-7 hidden cursor-not-allowed opacity-50"
            >
              Siguiente
            </button>
            <button
              type="submit"
              id="submit-btn"
              disabled
              class="w-52 h-12 py-2 px-4 shadow-sm rounded-md bg-gray-300 bg-blue-600 transition-all duration-700 text-white text-base dark:text-white font-semibold leading-7 hidden cursor-not-allowed opacity-50"
            >
              Crear mi cuenta
            </button>
          </div>
        </form>
      </div>
    </div>

    <script>
      const inputOnlyText = document.querySelectorAll("#name, #last-name");
      const inputOnlyNumbers = document.querySelectorAll("#document, #phone");
      const nameInput = document.getElementById("name");
      const lastNameInput = document.getElementById("last-name");
      const documentInput = document.getElementById("document");
      const fechaNacimientoInput = document.getElementById("fecha-nacimiento");
      const sexInput = document.getElementById("sex");
      const phoneInput = document.getElementById("phone");
      const emailInput = document.getElementById("email");
      const passwordInput = document.getElementById("password");
      const confirmPasswordInput = document.getElementById("confirm-password");
      const prevBtn = document.getElementById("prev-btn");
      const nextBtn = document.getElementById("next-btn");
      const submitBtn = document.getElementById("submit-btn");
      const steps = document.querySelectorAll("[data-step]");
      const stepContents = document.querySelectorAll("[data-step-content]");
      let currentStep = 1;

      // Funciones para validar la entrada de texto y números
      inputOnlyNumbers.forEach((input) => {
        input.addEventListener("input", (e) => {
          let value = e.target.value;
          // Eliminar cualquier carácter no numérico
          value = value.replace(/[^0-9]/g, "");
          // Limitar la longitud del valor a 9 caracteres
          if (value.length > 9) {
            value = value.slice(0, 9);
          }
          e.target.value = value;
        });

        input.addEventListener("keydown", (e) => {
          // Permitir las teclas de navegación y de edición (Flechas, Retroceso, Suprimir, etc.)
          if (
            [
              "ArrowLeft",
              "ArrowRight",
              "ArrowUp",
              "ArrowDown",
              "Backspace",
              "Delete",
              "Tab",
              "Alt",
              "Máyus",
              "Control",
              "Shift",
            ].includes(e.key)
          ) {
            return; // Permitir las teclas permitidas
          }
          // Bloquear todas las letras y mostrar alerta
          if (e.key.match(/[a-zA-Z]/)) {
            e.preventDefault();
            alert(`No se admiten letras en "${e.target.name}s"`);
          }
        });
      });

      inputOnlyText.forEach((input) => {
        input.addEventListener("input", (e) => {
          let value = e.target.value;
          // Eliminar cualquier número
          value = value.replace(/[0-9]/g, "");
          e.target.value = value;
        });

        input.addEventListener("keydown", (e) => {
          if (e.key.match(/[0-9]/)) {
            e.preventDefault();
            alert(`No se admiten números en "${e.target.name}s"`);
          }
        });
      });

      // Función para validar los campos del formulario
      const validateFormFields = () => {
        const isStep1Valid = () => {
          return (
            nameInput.value.trim() !== "" &&
            lastNameInput.value.trim() !== "" &&
            documentInput.value.trim() !== "" &&
            fechaNacimientoInput.value.trim() !== "" &&
            sexInput.value.trim() !== "" &&
            phoneInput.value.trim() !== ""
          );
        };

        const isStep2Valid = () => {
          return (
            emailInput.value.trim() !== "" &&
            passwordInput.value.trim() !== "" &&
            confirmPasswordInput.value.trim() !== "" &&
            passwordInput.value === confirmPasswordInput.value
          );
        };

        if (currentStep === 1) {
          return isStep1Valid();
        } else if (currentStep === 2) {
          return isStep2Valid();
        }

        return false;
      };

      // Función para habilitar o deshabilitar el botón de siguiente
      const toggleNextButton = () => {
        nextBtn.disabled = !validateFormFields();
      };

      // Event listeners para los campos del formulario
      const inputFields = [
        nameInput,
        lastNameInput,
        documentInput,
        fechaNacimientoInput,
        sexInput,
        phoneInput,
        emailInput,
        passwordInput,
        confirmPasswordInput,
      ];

      inputFields.forEach((input) => {
        input.addEventListener("input", () => {
          toggleNextButton();
          finalStep();
        });
      });

      const validateNameField = () => {
        const inputValue = nameInput.value.trim();
        if (inputValue.length < 2) {
          alert("El nombre debe ser de 2 caracteres o más.");
          return false;
        }
        return true;
      };

      const validateLastNameField = () => {
        const inputValue = lastNameInput.value.trim();
        if (inputValue.length < 2) {
          alert("El apellido debe ser de 2 caracteres o más.");
          return false;
        }
        return true;
      };

      const validateDocumentField = () => {
        const inputValue = documentInput.value.trim();
        if (inputValue.length !== 8) {
          alert("El documento debe tener exactamente 8 dígitos.");
          return false;
        }
        return true;
      };

      const validatePhoneField = () => {
        const inputValue = phoneInput.value.trim();
        if (inputValue.length !== 9) {
          alert("El número telefónico debe tener exactamente 9 dígitos.");
          return false;
        }
        return true;
      };

      // Event listeners para los botones de navegación
      nextBtn.addEventListener("click", () => {
        if (
          !validateNameField() ||
          !validateLastNameField() ||
          !validateDocumentField() ||
          !validatePhoneField()
        ) {
          return;
        }

        if (currentStep < steps.length) {
          updateStep(currentStep + 1);
        }
      });

      prevBtn.addEventListener("click", () => {
        if (currentStep > 1) {
          updateStep(currentStep - 1);
        }
      });

      // Función para actualizar el paso actual
      function updateStep(stepNumber) {
        steps.forEach((step, index) => {
          const isCurrentStep = index < stepNumber;
          step.classList.toggle("text-blue-600", isCurrentStep);
          step
            .querySelector(".step-number")
            .classList.toggle("bg-blue-600", isCurrentStep);
          step
            .querySelector(".step-number")
            .classList.toggle("text-white", isCurrentStep);
          step
            .querySelector(".step-number")
            .classList.toggle("bg-gray-100", !isCurrentStep);
          step
            .querySelector(".step-number")
            .classList.toggle("text-black", !isCurrentStep);
        });

        stepContents.forEach((content, index) => {
          content.classList.toggle("hidden", index !== stepNumber - 1);
        });

        currentStep = stepNumber;
        updateButtons();
      }

      // Función para actualizar los botones de navegación y el botón de envío
      function updateButtons() {
        prevBtn.style.display = currentStep === 1 ? "none" : "block";
        nextBtn.style.display = currentStep === steps.length ? "none" : "block";
        submitBtn.style.display =
          currentStep === steps.length ? "block" : "none";
        toggleNextButton(); // Actualiza el estado del botón de siguiente al cambiar de paso
      }

      function firstStep() {
        if (
          nameInput.value !== "" &&
          lastNameInput.value !== "" &&
          documentInput.value !== "" &&
          fechaNacimientoInput.value !== "" &&
          sexInput.value !== "" &&
          phoneInput.value !== ""
        ) {
          nextBtn.disabled = false;
          nextBtn.classList.remove(
            "bg-gray-300",
            "cursor-not-allowed",
            "opacity-50"
          );
          nextBtn.classList.add(
            "bg-blue-500",
            "hover:bg-blue-700",
            "active:bg-blue-800",
            "text-white"
          );
        } else {
          nextBtn.disabled = true;
          nextBtn.classList.add(
            "bg-gray-300",
            "cursor-not-allowed",
            "opacity-50"
          );
          nextBtn.classList.remove(
            "bg-blue-500",
            "hover:bg-blue-700",
            "active:bg-blue-800",
            "text-white"
          );
        }
      }

      firstStep();

      // Función para validar los campos y habilitar o deshabilitar el botón de envío
      function finalStep() {
        if (
          nameInput.value !== "" &&
          lastNameInput.value !== "" &&
          documentInput.value !== "" &&
          fechaNacimientoInput.value !== "" &&
          sexInput.value !== "" &&
          phoneInput.value !== "" &&
          emailInput.value !== "" &&
          passwordInput.value !== "" &&
          confirmPasswordInput.value !== ""
        ) {
          if (passwordInput.value === confirmPasswordInput.value) {
            submitBtn.disabled = false;
            submitBtn.classList.remove(
              "bg-gray-300",
              "cursor-not-allowed",
              "opacity-50"
            );
            submitBtn.classList.add(
              "bg-green-500",
              "hover:bg-green-700",
              "active:bg-green-800",
              "text-white"
            );
          } else {
            submitBtn.disabled = true;
            submitBtn.classList.add(
              "bg-gray-300",
              "cursor-not-allowed",
              "opacity-50"
            );
            submitBtn.classList.remove(
              "bg-green-500",
              "hover:bg-green-700",
              "active:bg-green-800",
              "text-white"
            );
          }
        } else {
          submitBtn.disabled = true;
          submitBtn.classList.add(
            "bg-gray-300",
            "cursor-not-allowed",
            "opacity-50"
          );
          submitBtn.classList.remove(
            "bg-green-500",
            "hover:bg-green-700",
            "active:bg-green-800",
            "text-white"
          );
        }
      }

      // Event listeners para los cambios en los campos del formulario
      nameInput.addEventListener("input", firstStep);
      lastNameInput.addEventListener("input", firstStep);
      documentInput.addEventListener("input", firstStep);
      fechaNacimientoInput.addEventListener("input", firstStep);
      sexInput.addEventListener("input", firstStep);
      phoneInput.addEventListener("input", firstStep);

      emailInput.addEventListener("input", finalStep);
      passwordInput.addEventListener("input", finalStep);
      confirmPasswordInput.addEventListener("input", finalStep);

      // Inicializa el formulario con el primer paso visible y los botones actualizados
      updateStep(1);
    </script>
  </div>
</Layout>
